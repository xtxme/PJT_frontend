'use client';
import { useEffect, useState } from 'react';
import styled from 'styled-components';
import InvoiceCard from '@/components/sale/invoices/InvoiceCard';
import {
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from '@mui/material';

const ListContainer = styled.div`
  padding: 20px;
  color: #000;
`;

export interface Invoice {
  id: number;
  order_number: string;
  customer_name: string;
  sale_name?: string;
  order_date: string;
  total_amount: number;
  bill?: string;
  status: string;
  note?: string;
  items?: {
    id: number;
    product_id: number;
    product_name: string;
    quantity: number;
    unit_price: number;
    total_price: number;
  }[];
}

interface InvoiceListProps {
  apiUrl?: string;
}

export default function InvoiceList({ apiUrl }: InvoiceListProps) {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [loading, setLoading] = useState(true);
  const [grandTotal, setGrandTotal] = useState<number>(0);
  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);
  const [search, setSearch] = useState('');
  const [filter, setFilter] = useState<'all' | 'completed' | 'canceled'>('all');

  const baseUrl = apiUrl ?? 'http://localhost:5002/sale/invoices';

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchInvoices = async (keyword = '', statusFilter = filter, showLoading = false) => {
    try {
      if (showLoading) setLoading(true);
      const endpoint = keyword
        ? `${baseUrl}/search?keyword=${encodeURIComponent(keyword)}`
        : baseUrl;

      const res = await fetch(endpoint);
      const json = await res.json();
      let invoicesData: Invoice[] = Array.isArray(json.data) ? json.data : [];

      // ‚úÖ filter ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (statusFilter === 'completed') {
        invoicesData = invoicesData.filter((inv) => inv.status === 'completed');
      } else if (statusFilter === 'canceled') {
        invoicesData = invoicesData.filter((inv) => inv.status === 'canceled');
      }

      setInvoices(invoicesData);

      const total = invoicesData
        .filter((i: Invoice) => i.status === 'completed')
        .reduce((sum: number, inv: Invoice) => sum + Number(inv.total_amount || 0), 0);

      setGrandTotal(total);
    } catch (err) {
      console.error('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏¥‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    } finally {
      setLoading(false);
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    fetchInvoices();
  }, [apiUrl]);

  // üîç ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå (‡πÑ‡∏°‡πà‡∏°‡∏µ debounce)
  useEffect(() => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetch ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î (‡πÑ‡∏°‡πà setLoading)
    fetchInvoices(search, filter, false);
  }, [search, filter]);

  /** ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏• */
  const cancelInvoice = async (id: number, amount: number) => {
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ?')) return;
    try {
      const res = await fetch(`${baseUrl}/${id}/cancel`, { method: 'PUT' });
      if (res.ok) {
        setInvoices((prev) =>
          prev.map((inv) => (inv.id === id ? { ...inv, status: 'canceled' } : inv))
        );
        setGrandTotal((prev) => prev - amount);
      }
    } catch (err) {
      console.error('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
    }
  };

  const handleViewInvoice = async (invoiceId: number) => {
    try {
      const res = await fetch(`${baseUrl}/${invoiceId}`);
      const json = await res.json();
      if (json.success) {
        setSelectedInvoice(json.data);
      } else {
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ');
      }
    } catch (err) {
      console.error('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
    }
  };

  if (loading && invoices.length === 0)
    return (
      <ListContainer>
        <div className="flex justify-center items-center h-[50vh]">
          <CircularProgress />
        </div>
      </ListContainer>
    );


  return (
    <ListContainer>
      <h2 className="text-lg font-semibold flex items-center gap-2 mb-3">
        <span>üßæ</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      </h2>
      <p className="text-gray-500 mb-3 text-sm">
        ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      </p>

      {/* üîç Search + Filter */}
      <div style={{ display: 'flex', gap: 10, alignItems: 'center', marginBottom: 16, flexWrap: 'wrap' }}>
        <TextField
          size="small"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏¥‡∏• / ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ / ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢..."
          variant="outlined"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          sx={{ flex: 1 }}
        />

        <FormControl size="small" sx={{ minWidth: 160 }}>
          <InputLabel id="filter-label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏¥‡∏•</InputLabel>
          <Select
            labelId="filter-label"
            label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏¥‡∏•"
            value={filter}
            onChange={(e) => setFilter(e.target.value as any)}
          >
            <MenuItem value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</MenuItem>
            <MenuItem value="completed">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</MenuItem>
            <MenuItem value="canceled">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</MenuItem>
          </Select>
        </FormControl>
      </div>

      {/* üîπ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏• */}
      <div className="flex flex-col gap-3">
        {invoices.length === 0 ? (
          <p className="text-gray-400 text-center mt-10">‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
        ) : (
          invoices.map((invoice) => (
            <InvoiceCard
              key={invoice.id}
              invoice={{
                id: invoice.id,
                orderNumber: invoice.order_number,
                date: new Date(invoice.order_date).toLocaleDateString('th-TH'),
                customer: invoice.customer_name,
                sale: invoice.sale_name,
                total: Number(invoice.total_amount),
                note: invoice.note,
                fileUrl: invoice.bill ?? '#',
                status: invoice.status === 'completed' ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
              }}
              onCancel={cancelInvoice}
              onView={() => handleViewInvoice(invoice.id)}
            />
          ))
        )}
      </div>

      {/* üí∞ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î */}
      <div style={{ marginTop: 20, fontWeight: 'bold' }}>
        üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à): {grandTotal.toLocaleString()} THB
      </div>

      {/* Popup ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏• */}
      <Dialog open={!!selectedInvoice} onClose={() => setSelectedInvoice(null)} fullWidth maxWidth="sm">
        <DialogTitle>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•</DialogTitle>
        {selectedInvoice && (
          <DialogContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
            <p>üßæ <b>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•:</b> {selectedInvoice.order_number}</p>
            <p>üìÖ <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {new Date(selectedInvoice.order_date).toLocaleString('th-TH')}</p>
            <p>üë§ <b>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</b> {selectedInvoice.customer_name}</p>
            <p>üßë‚Äçüíº <b>‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢:</b> {selectedInvoice.sale_name ?? '-'}</p>
            <p>üí∞ <b>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</b> {Number(selectedInvoice.total_amount).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
            <p>üì¶ <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> {selectedInvoice.status === 'completed' ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'}</p>
            <p>üìù <b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</b> {selectedInvoice.note || '-'}</p>
          </DialogContent>
        )}
        <DialogActions>
          <Button onClick={() => setSelectedInvoice(null)} sx={{ textTransform: 'none' }}>
            ‡∏õ‡∏¥‡∏î
          </Button>
        </DialogActions>
      </Dialog>
    </ListContainer>
  );
}
