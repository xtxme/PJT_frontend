'use client';
import { useEffect, useState } from 'react';
import styled from 'styled-components';
import InvoiceCard from '@/components/sale/invoices/InvoiceCard';
import { CircularProgress, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';

const ListContainer = styled.div`
  padding: 20px;
  color: #000;
`;

export interface Invoice {
  id: number;
  order_number: string;
  customer_name: string;
  sale_name?: string;
  order_date: string;
  total_amount: number;
  bill?: string;
  status: string;
  note?: string;
  items?: {
    id: number;
    product_id: number;
    product_name: string;
    quantity: number;
    unit_price: number;
    total_price: number;
  }[];
}

interface InvoiceListProps {
  apiUrl?: string;
}

export default function InvoiceList({ apiUrl }: InvoiceListProps) {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [loading, setLoading] = useState(true);
  const [grandTotal, setGrandTotal] = useState<number>(0);
  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);

  useEffect(() => {
    const fetchInvoices = async () => {
      try {
        const res = await fetch(apiUrl ?? 'http://localhost:5002/sale/invoices');
        const json = await res.json();
        const invoicesData = Array.isArray(json.data) ? json.data : [];
        setInvoices(invoicesData);

        const total = invoicesData
          .filter((i: Invoice) => i.status === 'completed')
          .reduce((sum: number, inv: Invoice) => sum + Number(inv.total_amount || 0), 0);


        setGrandTotal(total);
      } catch (err) {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
      } finally {
        setLoading(false);
      }
    };
    fetchInvoices();
  }, [apiUrl]);

  /** ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏• */
  const cancelInvoice = async (id: number, amount: number) => {
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ?')) return;
    try {
      const res = await fetch(`${apiUrl ?? 'http://localhost:5002/sale/invoices'}/${id}/cancel`, {
        method: 'PUT',
      });
      if (res.ok) {
        setInvoices((prev) =>
          prev.map((inv) =>
            inv.id === id ? { ...inv, status: 'canceled' } : inv
          )
        );
        setGrandTotal((prev) => prev - amount);
      }
    } catch (err) {
      console.error('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
    }
  };

  const handleViewInvoice = async (invoiceId: number) => {
    try {
      const res = await fetch(`http://localhost:5002/sale/invoices/${invoiceId}`);
      const json = await res.json();

      if (json.success) {
        setSelectedInvoice(json.data); // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏±‡∏ß‡∏ö‡∏¥‡∏• + items
      } else {
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ');
      }
    } catch (err) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
    }
  };


  if (loading)
    return (
      <ListContainer>
        <div className="flex justify-center items-center h-[50vh]">
          <CircularProgress />
        </div>
      </ListContainer>
    );

  return (
    <ListContainer>
      <h2 className="text-lg font-semibold flex items-center gap-2 mb-3">
        <span>üßæ</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      </h2>
      <p className="text-gray-500 mb-3 text-sm">
        ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•, ‡∏û‡∏¥‡∏°‡∏û‡πå, ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      </p>

      <div className="flex flex-col gap-3">
        {invoices.length === 0 ? (
          <p className="text-gray-400 text-center mt-10">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏¥‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
        ) : (
          invoices.map((invoice) => (
            <InvoiceCard
              key={invoice.id}
              invoice={{
                id: invoice.id,
                orderNumber: invoice.order_number,
                date: new Date(invoice.order_date).toLocaleDateString('th-TH'),
                customer: invoice.customer_name,
                sale: invoice.sale_name,
                total: Number(invoice.total_amount),
                note: invoice.note,
                fileUrl: invoice.bill ?? '#',
                status: invoice.status === 'completed' ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
              }}
              onCancel={cancelInvoice}
              onView={() => handleViewInvoice(invoice.id)}
            />

          ))
        )}
      </div>

      <div style={{ marginTop: 20, fontWeight: 'bold' }}>
        üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à): {grandTotal.toLocaleString()} THB
      </div>

      {/* Popup ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏• */}
      <Dialog open={!!selectedInvoice} onClose={() => setSelectedInvoice(null)} fullWidth maxWidth="sm">
        <DialogTitle>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•</DialogTitle>
        {selectedInvoice && (
          <DialogContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
            <p>üßæ <b>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•:</b> {selectedInvoice.order_number}</p>
            <p>üìÖ <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {new Date(selectedInvoice.order_date).toLocaleString('th-TH')}</p>
            <p>üë§ <b>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</b> {selectedInvoice.customer_name}</p>
            <p>üßë‚Äçüíº <b>‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢:</b> {selectedInvoice.sale_name ?? '-'}</p>
            <p>üí∞ <b>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</b> {Number(selectedInvoice.total_amount).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
            <p>üì¶ <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> {selectedInvoice.status === 'completed' ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'}</p>
            <p>üìù <b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</b> {selectedInvoice.note || '-'}</p>

            {selectedInvoice.items && selectedInvoice.items.length > 0 && (
              <div style={{ marginTop: '10px' }}>
                <b>üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</b>
                <table style={{ width: '100%', marginTop: '6px', borderCollapse: 'collapse' }}>
                  <thead>
                    <tr style={{ borderBottom: '1px solid #ddd' }}>
                      <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                      <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                      <th>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                      <th>‡∏£‡∏ß‡∏°</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedInvoice.items.map((item: any) => (
                      <tr key={item.id}>
                        <td>{item.product_name}</td>
                        <td>{item.quantity}</td>
                        <td>{Number(item.unit_price).toLocaleString()}</td>
                        <td>{Number(item.total_price).toLocaleString()}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </DialogContent>
        )}

        <DialogActions>
          <Button onClick={() => setSelectedInvoice(null)} sx={{ textTransform: 'none' }}>
            ‡∏õ‡∏¥‡∏î
          </Button>
        </DialogActions>
      </Dialog>
    </ListContainer>
  );
}
