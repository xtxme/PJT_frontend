'use client';

import { useState } from 'react';
import styled from 'styled-components';
import CustomerCard from '@/components/sale/CustomerCard';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
} from '@mui/material';

const PageContainer = styled.div`
  padding: 20px;
  color: #000;
`;

const HeaderRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
`;

const mockCustomersWithTotal = [
  { id: 'C001', name: 'Alice', totalPaid: 12500, address: '123 ‡∏ñ‡∏ô‡∏ô‡∏ô‡∏¥‡∏°‡∏°‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏¥‡∏ô‡∏ó‡πå ‡∏ï.‡∏™‡∏∏‡πÄ‡∏ó‡∏û ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' },
  { id: 'C002', name: 'Bob', totalPaid: 8900, address: '45/2 ‡∏ã‡∏≠‡∏¢‡∏™‡∏ß‡∏ô‡∏î‡∏≠‡∏Å ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' },
  { id: 'C003', name: 'Charlie', totalPaid: 0, address: '77 ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏≤ ‡∏ï.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡∏≠.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' },
  { id: 'C004', name: 'David', totalPaid: 5600, address: '99/5 ‡∏´‡∏°‡∏π‡πà 8 ‡∏ï.‡∏ó‡πà‡∏≤‡∏ß‡∏±‡∏á‡∏ï‡∏≤‡∏• ‡∏≠.‡∏™‡∏≤‡∏£‡∏†‡∏µ ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' },
  { id: 'C005', name: 'Ella', totalPaid: 4500, address: '222 ‡∏´‡∏°‡∏π‡πà 3 ‡∏ï.‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏µ‡∏¢‡∏∞ ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' },
  { id: 'C006', name: 'Frank', totalPaid: 7200, address: '12/7 ‡∏ñ‡∏ô‡∏ô‡∏ä‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏ô ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' },
];

export default function CustomerCardsPage() {
  const [customers, setCustomers] = useState(mockCustomersWithTotal);
  const [open, setOpen] = useState(false);

  const [newName, setNewName] = useState('');
  const [newAddress, setNewAddress] = useState('');
  const [newTotal, setNewTotal] = useState('');

  const grandTotal = customers.reduce((sum, c) => sum + c.totalPaid, 0);

  const handleAddCustomer = () => {
    if (!newName.trim() || !newAddress.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
      return;
    }

    const newCustomer = {
      id: `C${(customers.length + 1).toString().padStart(3, '0')}`,
      name: newName.trim(),
      address: newAddress.trim(),
      totalPaid: newTotal === '' ? 0 : Number(newTotal),
    };

    setCustomers([newCustomer, ...customers]);
    setNewName('');
    setNewAddress('');
    setNewTotal('');
    setOpen(false);
  };

  return (
    <PageContainer>
      {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß */}
      <HeaderRow>
        <div>
          <h2 className="text-lg font-semibold flex items-center gap-2">
            <span>üë•</span> ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </h2>
          <p className="text-gray-500 text-sm">
            ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          </p>
        </div>

        {/* üîò ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î popup */}
        <Button
          variant="contained"
          sx={{
            backgroundColor: '#16a34a',
            '&:hover': { backgroundColor: '#15803d' },
            borderRadius: '10px',
            textTransform: 'none',
            color: '#fff',
          }}
          onClick={() => setOpen(true)}
        >
          + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        </Button>
      </HeaderRow>

      {/* üîπ Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
      <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth="sm">
        <DialogTitle>+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</DialogTitle>
        <DialogContent sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
          <TextField
            label="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
            value={newName}
            onChange={(e) => setNewName(e.target.value)}
            fullWidth
          />
          <TextField
            label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
            value={newAddress}
            onChange={(e) => setNewAddress(e.target.value)}
            fullWidth
            multiline
          />
          <TextField
            label="‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (THB)"
            type="number"
            value={newTotal}
            onChange={(e) => setNewTotal(e.target.value)}
            fullWidth
          />
        </DialogContent>

        <DialogActions sx={{ p: 2 }}>
          <Button
            onClick={() => setOpen(false)}
            sx={{ textTransform: 'none', color: '#777' }}
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>
          <Button
            variant="contained"
            color="primary"
            sx={{ textTransform: 'none', borderRadius: '10px' }}
            onClick={handleAddCustomer}
          >
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </Button>
        </DialogActions>
      </Dialog>

      {/* üîπ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
      <div className="flex flex-col gap-3">
        {customers.map((c) => (
          <CustomerCard key={c.id} customer={c} />
        ))}
      </div>

      {/* üîπ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
      <div style={{ marginTop: 20, fontWeight: 'bold' }}>
        üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {grandTotal.toLocaleString()} THB
      </div>
    </PageContainer>
  );
}
