// üí° src/lib/api.ts  (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á "use client")

function stripTrailingSlash(s = "") {
    return s.replace(/\/+$/, "");
}

const isServer = typeof window === "undefined";

/** Base ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á Server (‡∏´‡∏•‡∏ö CORS) */
const RAW_ORIGIN =
    (process.env.NEXT_PUBLIC_BACKEND_DOMAIN_URL ?? "http://localhost").replace(/\/$/, "");
const RAW_PORT = process.env.NEXT_PUBLIC_BACKEND_PORT ?? "5002";
const SERVER_API_BASE = RAW_PORT
    ? `${stripTrailingSlash(RAW_ORIGIN)}:${RAW_PORT}`
    : stripTrailingSlash(RAW_ORIGIN);

/** ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÉ‡∏´‡πâ client ‡∏¢‡∏¥‡∏á‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏î‡πÄ‡∏°‡∏ô ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á = ‡πÉ‡∏ä‡πâ rewrites) */
const PUBLIC_ENDPOINT = process.env.NEXT_PUBLIC_ENDPOINT ?? "";

/** token ‡∏ó‡∏µ‡πà ‚Äú‡πÑ‡∏°‡πà‡∏•‡∏±‡∏ö‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡∏•‡∏±‡∏ö ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà NEXT_PUBLIC_ ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î) */
const PUBLIC_TOKEN = process.env.NEXT_PUBLIC_JWT_SITE_TOKEN || ""; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô JWT ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ñ‡∏ß‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ù‡∏±‡πà‡∏á server

function buildUrl(path: string) {
    if (/^https?:\/\//i.test(path)) return path;
    const normalized = path.startsWith("/") ? path : `/${path}`;
    const base = isServer ? SERVER_API_BASE : stripTrailingSlash(PUBLIC_ENDPOINT);
    return base ? `${base}${normalized}` : normalized; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ base ‚Üí ‡πÉ‡∏ä‡πâ relative path ‡πÉ‡∏´‡πâ rewrites ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
}

type FetchInit = RequestInit & { asJson?: boolean };

async function coreFetch(path: string, init: FetchInit = {}) {
    const { asJson, headers, ...rest } = init;
    const url = buildUrl(path);

    const res = await fetch(url, {
        ...rest,
        headers: {
            "Content-Type": "application/json",
            ...(PUBLIC_TOKEN ? { Authorization: `Bearer ${PUBLIC_TOKEN}` } : {}),
            ...(headers || {}),
        },
        cache: rest.cache ?? (isServer ? "no-store" : undefined),
        credentials: rest.credentials ?? "include",
    });

    if (!res.ok) {
        let msg = `HTTP ${res.status}`;
        try {
            const j = await res.json();
            msg = j?.message ?? msg;
        } catch {
            try { msg = await res.text(); } catch {}
        }
        throw new Error(msg);
    }

    return asJson === false ? res : res.json();
}

/** ‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÅ‡∏ö‡∏ö REST */
export const api = {
    get:  <T = unknown>(path: string, init?: FetchInit) => coreFetch(path, { ...init, method: "GET" }) as Promise<T>,
    post: <T = unknown>(path: string, body?: any, init?: FetchInit) =>
        coreFetch(path, { ...init, method: "POST", body: body != null ? JSON.stringify(body) : undefined }) as Promise<T>,
    put:  <T = unknown>(path: string, body?: any, init?: FetchInit) =>
        coreFetch(path, { ...init, method: "PUT", body: body != null ? JSON.stringify(body) : undefined }) as Promise<T>,
    del:  <T = unknown>(path: string, init?: FetchInit) =>
        coreFetch(path, { ...init, method: "DELETE" }) as Promise<T>,
    patch: <T = unknown>(path: string, body?: any, init?: FetchInit) =>
        coreFetch(path, {
            ...init,
            method: "PATCH",
            body: body != null ? JSON.stringify(body) : undefined,
        }) as Promise<T>,
};

/** ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ raw Response (‡πÄ‡∏ä‡πà‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå) */
export const apiRaw = (path: string, init?: FetchInit) => coreFetch(path, { ...init, asJson: false }) as Promise<Response>;